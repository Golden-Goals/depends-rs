---
source: depends_core/src/macros/dependee.rs
assertion_line: 285
expression: format_source(derive_dependee(input).to_string().as_str())
---
struct FooNode<T> {
    dependencies: SomeDeps<D, E>,
    data: ::std::cell::RefCell<::depends::core::NodeState<Foo<T>>>,
    id: usize,
}
impl<T> FooNode<T> {
    pub fn new(dependencies: SomeDeps<D, E>, data: Foo<T>) -> ::std::rc::Rc<FooNode<T>> {
        Self::new_with_id(dependencies, data, ::depends::core::next_node_id())
    }

    pub fn new_with_id(
        dependencies: SomeDeps<D, E>,
        data: Foo<T>,
        id: usize,
    ) -> ::std::rc::Rc<FooNode<T>> {
        ::std::rc::Rc::new(FooNode {
            dependencies,
            data: ::std::cell::RefCell::new(::depends::core::NodeState::new(data)),
            id,
        })
    }
}
impl<T> ::depends::core::Identifiable for FooNode<T> {
    fn id(&self) -> usize {
        self.id
    }
}
impl<T> Foo<T> {
    pub fn into_node(self, dependencies: SomeDeps<D, E>) -> ::std::rc::Rc<FooNode<T>> {
        FooNode::new(dependencies, self)
    }
}
impl<T> ::depends::core::Named for Foo<T> {
    fn name() -> &'static str {
        "Foo"
    }
}
impl<T> ::depends::core::Named for FooNode<T> {
    fn name() -> &'static str {
        Foo::<T>::name()
    }
}
impl<T> ::depends::core::Depends for Foo<T> {
    type Input < 'a > = < SomeDeps < D , E > as :: depends :: core :: Resolve > :: Output < 'a > where Self : 'a ;
}
impl<T> ::depends::core::Resolve for FooNode<T> {
    type Output < 'a > = :: std :: cell :: Ref < 'a , :: depends :: core :: NodeState < Foo >> where Self : 'a ;

    fn resolve(&self, visitor: &mut impl ::depends::core::Visitor) -> Self::Output<'_> {
        use ::depends::core::IsDirty;
        if visitor.visit(self) {
            let input = self.dependencies.resolve(visitor);
            if input.is_dirty() {
                let mut node = self.data.borrow_mut();
                *node.state_mut() = ::depends::core::State::Dirty;
                node.data_mut().update_mut(input);
            }
        }
        self.data.borrow()
    }

    fn clean(&self, visitor: &mut impl ::depends::core::Visitor) {
        use ::depends::core::Clean;
        if visitor.visit(self) {
            self.dependencies.clean(visitor);
            self.data.borrow_mut().clean();
        }
    }
}
impl<T> ::depends::core::Clean for Foo {
    fn clean(&mut self) {}
}

