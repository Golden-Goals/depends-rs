use depends::{
    derives::{Dependencies, Operation},
    error::EarlyExit,
    TargetMut, UpdateDerived,
};

use crate::docs::simple_value::SomeNumber;

// Outline the inner types of two nodes we wish to depend on.
#[derive(Dependencies)]
pub struct TwoNumbers {
    pub left: SomeNumber,
    pub right: SomeNumber,
}

#[derive(Operation)]
pub struct Multiply;

impl UpdateDerived for Multiply {
    // [TwoNumbersRef] is generated by the [Dependencies] macro, and
    // represents read-references to nodes containing the declared types.
    type Input<'a> = TwoNumbersRef<'a> where Self: 'a;
    type Target<'a> = TargetMut<'a, SomeNumber> where Self: 'a;

    fn update_derived(
        TwoNumbersRef { left, right }: TwoNumbersRef<'_>,
        mut target: TargetMut<'_, SomeNumber>,
    ) -> Result<(), EarlyExit> {
        target.value = left.value * right.value;
        Ok(())
    }
}
